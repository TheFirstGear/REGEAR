using UnityEngine;
using System.Collections;

public class PlayerMovement : MonoBehaviour
{
    [SerializeField] private float moveSpeed = 5f; // Movement speed
    [SerializeField] private float jumpForce = 5f; // Jump force
    [SerializeField] private float dashSpeed = 15f; // Horizontal dash speed
    [SerializeField] private float dashDuration = 0.2f; // Duration of horizontal dash
    [SerializeField] private float dashCooldown = 1f; // Cooldown between dashes
    [SerializeField] private Transform groundCheck; // Position to check for ground
    [SerializeField] private float checkRadius = 0.2f; // Radius for ground check
    [SerializeField] private float crouchSpeedMultiplier = 0.5f; // Speed reduction while crouching
    [SerializeField] private float crouchHeightMultiplier = 0.5f; // Collider height reduction
    [SerializeField] private Transform ceilingCheck; // Position to check for ceiling
    [SerializeField] private InputManager inputManager; // Reference to InputManager

    private Rigidbody2D rb; // Reference to Rigidbody2D component
    private CapsuleCollider2D collider; // Reference to CapsuleCollider2D component
    private float moveInput; // Horizontal input value
    private bool isGrounded; // Check if player is on ground
    private bool isDashing; // Check if currently dashing
    private bool canDash = true; // Check if dash is off cooldown
    private float lastMoveDirection = 1f; // Last direction faced (for dash when no input)
    private LayerMask groundLayer; // Layer for ground detection
    private bool isCrouching; // Check if currently crouching
    private Vector2 originalColliderSize; // Original collider size
    private Vector2 originalColliderOffset; // Original collider offset
    private Vector3 originalGroundCheckPos; // Original ground check position
    private Vector3 originalLocalScale; // Original sprite scale

    void Start()
    {
        // Get components
        rb = GetComponent<Rigidbody2D>();
        collider = GetComponent<CapsuleCollider2D>();
        // Hardcode the ground layer to "Ground"
        groundLayer = LayerMask.GetMask("Ground");
        // Store original values
        originalColliderSize = collider.size;
        originalColliderOffset = collider.offset;
        originalGroundCheckPos = groundCheck.localPosition;
        originalLocalScale = transform.localScale;

        if (inputManager == null)
        {
            Debug.LogError("InputManager not assigned in PlayerMovement");
        }
    }

    void Update()
    {
        // Get horizontal input from InputManager
        moveInput = inputManager.Horizontal;
        if (moveInput != 0)
        {
            lastMoveDirection = moveInput;
        }

        // Check if player is grounded
        isGrounded = Physics2D.OverlapCircle(groundCheck.position, checkRadius, groundLayer);
        Debug.Log($"Grounded: {isGrounded}, Crouching: {isCrouching}, InputManager: {(inputManager != null ? "Assigned" : "Null")}");

        // Handle dash input (tap)
        if (inputManager.IsDashCrouchTapped && isGrounded && !isDashing && !isCrouching && canDash)
        {
            StartCoroutine(Dash());
            Debug.Log("Dash triggered");
        }

        // Handle crouch input (hold)
        if (inputManager.IsDashCrouchHeld && isGrounded && !isDashing && !isCrouching)
        {
            // Start crouching
            isCrouching = true;
            collider.size = new Vector2(originalColliderSize.x, originalColliderSize.y * crouchHeightMultiplier);
            collider.offset = new Vector2(originalColliderOffset.x, 0f);
            transform.localScale = new Vector3(originalLocalScale.x, originalLocalScale.y * crouchHeightMultiplier, originalLocalScale.z);
            float positionOffsetY = -(originalColliderSize.y * (1f - crouchHeightMultiplier)) / 2f;
            transform.position = new Vector3(transform.position.x, transform.position.y + positionOffsetY, transform.position.z);
            groundCheck.localPosition = originalGroundCheckPos;
            Debug.Log("Crouching started");
        }
        else if (!inputManager.IsDashCrouchHeld && isCrouching)
        {
            // Check for ceiling before uncrouching
            bool ceilingHit = Physics2D.OverlapCircle(ceilingCheck.position, checkRadius, groundLayer);
            if (!ceilingHit)
            {
                // Stop crouching
                isCrouching = false;
                collider.size = originalColliderSize;
                collider.offset = originalColliderOffset;
                transform.localScale = originalLocalScale;
                float positionOffsetY = (originalColliderSize.y * (1f - crouchHeightMultiplier)) / 2f;
                transform.position = new Vector3(transform.position.x, transform.position.y + positionOffsetY, transform.position.z);
                groundCheck.localPosition = originalGroundCheckPos;
                Debug.Log("Crouching stopped");
            }
        }

        // Handle jump input
        if (inputManager.IsJumpPressed && isGrounded && !isCrouching)
        {
            rb.linearVelocity = new Vector2(rb.linearVelocity.x, jumpForce);
            Debug.Log($"Jump triggered, Velocity: {rb.linearVelocity}");
        }
    }

    void FixedUpdate()
    {
        // Apply horizontal movement only if not dashing
        if (!isDashing)
        {
            float currentSpeed = isCrouching ? moveSpeed * crouchSpeedMultiplier : moveSpeed;
            rb.linearVelocity = new Vector2(moveInput * currentSpeed, rb.linearVelocity.y);
        }
    }

    private IEnumerator Dash()
    {
        canDash = false;
        isDashing = true;

        // Get current horizontal input from InputManager
        float horizontalInput = inputManager.Horizontal;

        // Determine dash direction (use current input or last direction)
        float dashDirectionX = horizontalInput != 0 ? horizontalInput : lastMoveDirection;

        // Apply horizontal dash velocity
        Vector2 dashVelocity = new Vector2(dashDirectionX * dashSpeed, 0f);
        rb.linearVelocity = dashVelocity;
        Debug.Log("Dashing, Direction: " + dashDirectionX);

        // Wait for dash duration
        yield return new WaitForSeconds(dashDuration);

        // End dash, restore normal movement
        isDashing = false;
        float currentSpeed = isCrouching ? moveSpeed * crouchSpeedMultiplier : moveSpeed;
        rb.linearVelocity = new Vector2(inputManager.Horizontal * currentSpeed, rb.linearVelocity.y);

        // Wait for cooldown
        yield return new WaitForSeconds(dashCooldown);
        canDash = true;
    }
}